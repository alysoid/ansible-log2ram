# {{ ansible_managed }}
# Configuration file for Log2Ram (https://github.com/azlux/log2ram) under MIT license.
# This configuration file is read by the log2ram v{{ log2ram.version }} service

# Size for the ram folder, it defines the size the log folder will reserve into the RAM.
# If it's not enough, log2ram will not be able to use ram. Check you /var/log size folder.
# The default is 40M and is basically enough for a lot of applications.
# You will need to increase it if you have a server and a lot of log for example.
SIZE={{ log2ram.size }}

# Select the log syncing method between the log directory on disk and in the RAM.
# The variable may be uncommented out, setting it to false, if "cp" is preferred over "rsync".
# Currently, this option needs to be unset or set to true for "rsync" to run,
# with "cp" available for fallback when "rsync" is missing.
# In all other cases, setting USE_RSYNC to anything other than true will default to "cp".
USE_RSYNC={{ log2ram.rsync | lower }}

# If there are some errors with available RAM space, a system mail will be send
# Change it to false and you will have only a log if there is no place on RAM anymore.
MAIL={{ log2ram.mail | lower }}

# Variable for folders to put in RAM. Specify the real folder `/path/folder` with no final `/`.
# `/path/hdd.folder` will be automatically created. Multiple path can be separeted by `;`.
# example : PATH_DISK="/var/log;/home/test/FolderInRam"
PATH_DISK='{{ log2ram.path | join(';') }}'

#
# Zram configuration
#

# ZL2R Zram Log 2 Ram enables a zram drive when ZL2R=true. ZL2R=false is mem only tmpfs
ZL2R={{ log2ram.zram | lower }}

# COMP_ALG this is any compression algorithm listed in /proc/crypto
# lz4 is fastest with lightest load but deflate (zlib) and Zstandard (zstd) give far better compression ratios
# lzo is very close to lz4 and may with some binaries have better optimisation
# COMP_ALG=lz4 for speed or Zstd for compression, lzo or zlib if optimisation or availabilty is a problem
COMP_ALG={{ log2ram.compression }}

# LOG_DISK_SIZE is the uncompressed disk size. Note zram uses about 0.1% of the size of the disk when not in use
# LOG_DISK_SIZE is expected compression ratio of alg chosen multiplied by log SIZE
# lzo/lz4=2.1:1 compression ratio zlib=2.7:1 zstandard=2.9:1
# Really a guestimate of a bit bigger than compression ratio whilst minimising 0.1% mem usage of disk size
LOG_DISK_SIZE={{ log2ram_log_disk_size }}
